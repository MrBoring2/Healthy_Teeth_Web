@using Blazored.LocalStorage
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using WebSite.Providers
@using WebSite.Services

<Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    [Inject]
    private HubConnection HubConnection { get; set; }
    // [Inject]
    // public AuthHttpService AccessTokenProvider { get; set; }
    // [Inject]
    // HubConnection HubConnection { get; set; }
    private CancellationTokenSource cts = new CancellationTokenSource();
    private async Task OnNavigateAsync(NavigationContext args)
    {
        // var auth = await _localStorageService.GetItemAsync<string>("accessToken");
        // var user = await _authProvider.GetAuthenticationStateAsync();
        // Console.WriteLine($"Авторизован: {user.User.Claims.FirstOrDefault(p => p.Type == ClaimTypes.Name)}, Токен: {auth}");
        // if (!string.IsNullOrEmpty(auth) && !user.User.Identity.IsAuthenticated)
        // {
        //     await _authProvider.GetAuthenticationStateAsync();
        // }
    }

    protected override async Task OnInitializedAsync()
    {
       //await  _hub.StartAsync();

        // HubConnection = new HubConnectionBuilder()
        // .WithUrl("https://localhost:8082/chat", async options =>
        // {
        //     options.AccessTokenProvider = async () =>
        // {
        //     var accessTokenResult = await AccessTokenProvider.GetAccessTokenAsync();
        //     Console.WriteLine("ТОкен получен: " + accessTokenResult);
        //     return accessTokenResult;
        // };
        // })
        // .WithAutomaticReconnect()
        // .Build();
        await ConnectWithRetrySync(cts.Token);

        HubConnection.Closed += error =>
        {
            Console.WriteLine("Не удалось соединиться с сервером");
            return ConnectWithRetrySync(cts.Token);
        };
    }

    private async Task<bool> ConnectWithRetrySync(CancellationToken token)
    {
        Console.WriteLine("Попытка подлючмться к серверу");
        while (true)
        {
            if (HubConnection.State == HubConnectionState.Connected)
                return true;
            try
            {
                await HubConnection.StartAsync();
                Console.WriteLine("Подлюкчен к серверу");
            }
            catch when (token.IsCancellationRequested)
            {
                Console.WriteLine("Полный провал");
                return false;
            }
            catch
            {
                Console.WriteLine(HubConnection.State);
                Console.WriteLine("Соединение подключено");
                await Task.Delay(10000);
            }
        }
    }
    // public async ValueTask DisposeAsync()
    // {
    //     cts.Cancel();
    //     cts.Dispose();
    //     await HubConnection.DisposeAsync();
    // }
}
