@using Blazored.LocalStorage
@using System.Security.Claims
@using WebSite.Providers

<Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    // private CancellationTokenSource cts = new CancellationTokenSource();
    private async Task OnNavigateAsync(NavigationContext args)
    {

        /* var auth = await _localStorageService.GetItemAsync<string>("accessToken");
         var user = await _authProvider.GetAuthenticationStateAsync();
         Console.WriteLine($"Авторизован: {user.User.Claims.FirstOrDefault(p => p.Type == ClaimTypes.Name)}, Токен: {auth}");
         if (!string.IsNullOrEmpty(auth) && !user.User.Identity.IsAuthenticated)
             {
             await _authProvider.GetAuthenticationStateAsync();
         }*/
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     await ConnectWithRetrySync(cts.Token);

    //     hubConnection.Closed += error =>
    //     {
    //         Console.WriteLine("Не удалось соединиться с сервером");
    //         return ConnectWithRetrySync(cts.Token);
    //     };
    // }

    // private async Task<bool> ConnectWithRetrySync(CancellationToken token)
    // {
    //     while (true)
    //     {
    //         try
    //         {
    //             await hubConnection.StartAsync(token);
    //         }
    //         catch when (token.IsCancellationRequested)
    //         {
    //             return false;
    //         }
    //         catch
    //         {
    //             await Task.Delay(5000);
    //         }
    //     }
    // }
    // public async ValueTask DisposeAsync()
    // {
    //     cts.Cancel();
    //     cts.Dispose();
    //     await hubConnection.DisposeAsync();
    // }
}
